version: '3'
services:

    netbox: &netbox
      build:
        context: ./data/Dockerfiles/netbox/
        args:
          - BRANCH=${NETBOX_BRANCH-master}
      restart: always
#      image: ninech/netbox:${IMAGE_BRANCH-latest}
      container_name: dc_netbox
      depends_on:
        - postgres
      volumes:
        - ./data/Dockerfiles/netbox/startup_scripts:/opt/netbox/startup_scripts:ro
        - ./data/Dockerfiles/netbox/initializers:/opt/netbox/initializers:ro
        - ./data/Dockerfiles/netbox/configuration:/etc/netbox/config:ro
        - ./data/netbox/nginx-config:/etc/netbox-nginx/
        - ./data/netbox/static-files:/opt/netbox/netbox/static
        - ./data/netbox/media-files:/opt/netbox/netbox/media
        - ./data/netbox/report-files:/etc/netbox/reports:ro
        - ./data/netbox/initializers:/opt/netbox/initializer
#        - /etc/pki/ca-trust/source/anchors/ca.darz.local.pem:/etc/ssl/certs/ca.darz.local.pem:ro
#      ports:
#        - "${HTTP_BIND:-0.0.0.0}:${HTTP_PORT:-8001}:${HTTP_PORT:-8001}"
      environment:
        - DB_NAME=${DB_NAME}
        - DB_USER=${DB_USER}
        - DB_PASSWORD=${DB_PASSWORD}
        - DB_HOST=${DB_HOST}
        - SUPERUSER_NAME=${SUPERUSER_NAME}
        - SUPERUSER_EMAIL=${SUPERUSER_EMAIL}
        - SUPERUSER_PASSWORD=${SUPERUSER_PASSWORD}
        - SUPERUSER_API_TOKEN=${SUPERUSER_API_TOKEN}
        - NETBOX_USERNAME=${NETBOX_USERNAME}
        - NETBOX_PASSWORD=${NETBOX_PASSWORD}
        - ALLOWED_HOSTS=${ALLOWED_HOSTS}
        - SECRET_KEY=${SECRET_KEY}
        - EMAIL_SERVER=${EMAIL_SERVER}
        - EMAIL_PORT=${EMAIL_PORT}
        - EMAIL_USERNAME=${EMAIL_USERNAME}
        - EMAIL_PASSWORD=${EMAIL_PASSWORD}
        - EMAIL_TIMEOUT=${EMAIL_TIMEOUT}
        - EMAIL_FROM=${EMAIL_FROM}
        - LOGIN_REQUIRED=${LOGIN_REQUIRED}
        - BANNER_TOP=${BANNER_TOP}
        - BANNER_BOTTOM=${BANNER_BOTTOM}
        - BANNER_LOGIN=${BANNER_LOGIN}
        - MEDIA_ROOT=${MEDIA_ROOT}
        - NAPALM_USERNAME=${NAPALM_USERNAME-admin}
        - NAPALM_PASSWORD=${NAPALM_PASSWORD-admin}
        - NAPALM_TIMEOUT=${NAPALM_TIMEOUT-30}
        - MAX_PAGE_SIZE=${MAX_PAGE_SIZE}
        - AUTH_LDAP_SERVER_URI=${AUTH_LDAP_SERVER_URI}
        - AUTH_LDAP_BIND_DN=${AUTH_LDAP_BIND_DN}
        - AUTH_LDAP_BIND_PASSWORD=${AUTH_LDAP_BIND_PASSWORD}
        - LDAP_IGNORE_CERT_ERRORS=${LDAP_IGNORE_CERT_ERRORS}
        - AUTH_LDAP_USER_SEARCH_BASEDN=${AUTH_LDAP_USER_SEARCH_BASEDN}
        - AUTH_LDAP_GROUP_SEARCH_BASEDN=${AUTH_LDAP_GROUP_SEARCH_BASEDN}
        - AUTH_LDAP_REQUIRE_GROUP_DN=${AUTH_LDAP_REQUIRE_GROUP_DN}
        - AUTH_LDAP_IS_ADMIN_DN=${AUTH_LDAP_IS_ADMIN_DN}
        - AUTH_LDAP_IS_SUPERUSER_DN=${AUTH_LDAP_IS_SUPERUSER_DN}
        #- AUTH_LDAP_FIND_GROUP_PERMS=${AUTH_LDAP_FIND_GROUP_PERMS}
        - AUTH_LDAP_CACHE_GROUPS=${AUTH_LDAP_CACHE_GROUPS}
        - DEBUG=${DEBUG-false}
        - MAINTENANCE_MODE=${MAINTENANCE_MODE-false}
        - WEBHOOKS_ENABLED=true

    nginx:
      image: nginx:1.11-alpine
      container_name: dc_netbox_nginx
      command: nginx -g 'daemon off;' -c /etc/netbox-nginx/nginx.conf
      depends_on:
          - netbox
#      ports:
#        - "${HTTP_BIND:-0.0.0.0}:${HTTP_PORT:-8080}:${HTTP_PORT:-8080}"
      volumes:
        - ./data/netbox/nginx-config:/etc/netbox-nginx/:rw
        - ./data/netbox/static-files:/opt/netbox/netbox/static:rw
      environment:
        - VIRTUAL_HOST=${PUBLIC_FQDN}
        - VIRTUAL_PORT=${HTTP_PORT:-8080}
        - LETSENCRYPT_HOST=${PUBLIC_FQDN}
        - LETSENCRYPT_EMAIL=${SUPERUSER_EMAIL}

    postgres:
      image: postgres:9.6-alpine
      container_name: dc_netbox_pg
      environment:
        - POSTGRES_USER=${DB_USER}
        - POSTGRES_PASSWORD=${DB_PASSWORD}
        - POSTGRES_DB=${DB_NAME}
      volumes:
        - ./data/postgres/:/var/lib/postgresql/data:rw
#    redis:
#      image: redis:4-alpine
#      container_name: dc_netbox_redis
#      command:
#      - sh
#      - -c # this is to evaluate the $REDIS_PASSWORD from the env
#      - redis-server --appendonly yes --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
#      volumes:
#      - ./data/redis:/data
#
#    netbox-worker:
#      << : *netbox
#      container_name: dc_netbox_worker
#      depends_on:
#      - redis
#      entrypoint:
#      - python3
#      - /opt/netbox/netbox/manage.py
#      command:
#      - rqworker


